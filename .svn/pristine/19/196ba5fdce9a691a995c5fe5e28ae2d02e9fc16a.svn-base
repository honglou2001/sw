package com.zhuika.service.impl;

import java.io.UnsupportedEncodingException;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.nio.ByteBuffer;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;

import javax.annotation.Resource;

import org.springframework.stereotype.Service;


import com.users.ejb.EjbEnum;
import com.users.ejb.SerialnumberDetach;
import com.users.ejb.SerialnumberFee;
import com.watch.ejb.Serialnumber;
import com.watch.ejb.UserAlarm;
import com.zhuika.dao.IFriendContactDao;
import com.zhuika.dao.IInfoDao;
import com.zhuika.dao.ISerialNumberDao;
import com.zhuika.dao.ISerialnumberFeeDao;
import com.zhuika.dao.ISerialnumberParamDao;
import com.zhuika.discard.DiscardClient;
import com.zhuika.entity.Info;
import com.zhuika.entity.SerialNumber;
import com.zhuika.factory.DAOException;
import com.zhuika.service.SerialNumberService;
import com.zhuika.service.UserService;
import com.zhuika.util.ByteConverter;
import com.zhuika.util.Hex;
import com.zhuika.util.Tools;
import com.zhuika.util.ejbproxy;
import com.watch.ejb.SerialnumberParam;

@Service("serialNumberSerivce")
public class SerialNumberServiceImpl implements SerialNumberService {
    @Resource
    private ISerialNumberDao serialNumberDao;
    @Resource
	private IInfoDao infoDao;
    @Resource
	private ISerialnumberParamDao serialNumberParamDao;
    @Resource
   	private UserService userService;
    @Resource
    private ISerialnumberFeeDao serialnumberFeeDao;
    
    
	public SerialNumber getSerialNumber(String serialNumber) {
		try {
			return serialNumberDao.findBySerialNumber(serialNumber);
		} catch (DAOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return null;
	}



	public void updateSerialNumber(SerialNumber serialNumber) {
		try {
			serialNumberDao.updateSerialNumber(serialNumber);
		} catch (DAOException e1) {
			e1.printStackTrace();
		}
		String info = "";//"4040000F" + serialNumber.getSerialNumber() + "4102";
		String cmd="4102";
		if("0".equals(serialNumber.getLbs())){
			//基站定位：180秒  ,安全模式：180s，省电模式：360s，SOS：gps开，60s						
			//安全模式：180s  1,180
			if("180".equals(serialNumber.getSetGps())){
				//info = info + "302C00B4"+"0032"+"0d0a";
				info = ByteConverter.GetSendData(serialNumber.getSerialNumber(),cmd,"302C00B4",true);	
			//省电模式：360s	
			}else if("360".equals(serialNumber.getSetGps())){
				//info = info + "302C0168"+"0032"+"0d0a";
				info = ByteConverter.GetSendData(serialNumber.getSerialNumber(),cmd,"302C0168",true);
			}
			
		}else{
			if("60".equals(serialNumber.getSetGps())){
				//info = info + "312C003c"+"2132"+"0d0a";
				info = ByteConverter.GetSendData(serialNumber.getSerialNumber(),cmd,"312C003c",true);
			}
			//gps定位：10秒
//			if("10".equals(serialNumber.getSetGps())){
//				info = info + "000a"+"2132"+"0d0a";
//			//gps定位：300秒	
//			}else if("300".equals(serialNumber.getSetGps())){
//				info = info + "012c"+"0032"+"0d0a";
//			}else{
//			//gps定位：600秒	
//				info = info + "0258"+"0032"+"0d0a";
//			}
		}				
//		byte b[] = HexString2Bytes(info);

		ejbproxy.saveToMq(serialNumber.getSerialNumber(), "4102", info, "", "定位模式","");
		ByteConverter.sendToServerAscii(infoDao,serialNumber.getSerialNumber(),info);

	}
	
	
	@Override
	public void updateSerialNumberAction(Serialnumber serialNumber,HashMap<String, String> mapSerial) {
		// TODO Auto-generated method stub
	
		String cmd = "";
		String action="";
		String usrid="";
		String param ="";
		String serialnumid="";
		
		if(mapSerial!=null)
		{
			if(mapSerial.containsKey("action"))
			{
				action = mapSerial.get("action");
			}
			if(mapSerial.containsKey("usrid"))
			{
				usrid = mapSerial.get("usrid");
			}
			if(mapSerial.containsKey("serialnumid"))
			{
				serialnumid = mapSerial.get("serialnumid");
			}	
		}
		
		if(action.equals("1")) //远程关机
		{
			cmd = "7200";
		}
		else if(action.equals("2"))  //查找手机，
		{
			//@@<L><ID><0x7106><flag><checksum>\r\n
			//Flag=1   寻找
			cmd = "7106";
		}
		else if(action.equals("3"))  //操作指令:设置静音（类似闹钟，上课模式），weekIsValid 和设置闹钟的星期及有效取值一样，；
		{
			cmd = "2002";
		}
		else if(action.equals("4"))  //服务器下行拨打模式指令：
		{
			cmd = "7104";
		}
		else if(action.equals("5"))  //服务器下行小红花数：
		{
			cmd = "7108";
		}
		else if(action.equals("6"))  //通讯录：
		{
			cmd = "7103";
		}   //发送B手表的电话号码到A手表：
		else if(action.equals("7"))  //发送B手表的电话号码到A手表，和发送通讯录有功能重合；
		{
			cmd = "0007";
		}
		else if(action.equals("7109"))  //发送短信
		{
			cmd = "7109";
		}
		
		String info="";
		
		//关机 7200
		if(cmd.equals("7200")){
			
			info = ByteConverter.GetSendData(serialNumber.getSerialnumber(),cmd,"01",false);			
			ejbproxy.saveToMq(serialNumber.getSerialnumber(), cmd, info, usrid, "远程关机",param);
			
		}  //查找手机，
		else if(cmd.equals("7106")){
			
			info = ByteConverter.GetSendData(serialNumber.getSerialnumber(),cmd,"01",false);
			ejbproxy.saveToMq(serialNumber.getSerialnumber(), cmd, info, usrid, "查找手机",param);
			
		}   //设置静默时间
		else if(cmd.equals("2002")){
			
			//?serialnumid=3&action=3&weekIsValid=64&begintime=09:10&endtime=17:05
			int category = EjbEnum.SNParmEnum.silent.value();
			SerialnumberParam serialnumberParamInfo = new SerialnumberParam();
			serialnumberParamInfo.setFcategory(category);
			serialnumberParamInfo.setFsnid(serialnumid);
			serialnumberParamInfo.setFuserid(usrid);
			serialnumberParamInfo.setFremark("备注，序列号为："+serialNumber.getSerialnumber());
			serialnumberParamInfo.setFname("静默设置");
			
			String weekIsValid = mapSerial.get("weekIsValid");
			String begintime = mapSerial.get("begintime");
			String endtime = mapSerial.get("endtime");
			if(weekIsValid!=null&&weekIsValid.length()>0&&begintime!=null&&begintime!=null)
			{
				serialnumberParamInfo.setFlong1(new BigInteger(weekIsValid));
				serialnumberParamInfo.setFchar1(begintime);
				serialnumberParamInfo.setFchar2(endtime);
				
				HashMap<String, String> map = new HashMap<String, String>();	
				map.put("FSnID",serialnumid);
				map.put("FCategory", String.valueOf(category));
				
				List<SerialnumberParam> lists = this.ListSerialnumberParam(0, 100, map);
				if(lists==null||lists.size()==0){				
					serialNumberParamDao.AddSerialnumberParam(serialnumberParamInfo);
				}
				else
				{
					SerialnumberParam serailInfo = lists.get(0);
					serailInfo.setFlong1(new BigInteger(weekIsValid));
					serailInfo.setFchar1(begintime);
					serailInfo.setFchar2(endtime);
					
					serialNumberParamDao.UpdateSerialnumberParam(serailInfo);
				}
			}

			SentSilentToWatch(serialNumber,weekIsValid,begintime,endtime);			
			return;
			
		}  //服务器下行拨打模式指令：
		else if(cmd.equals("7104")){
			String flag = "3031";
			String type = "";
			if(mapSerial.containsKey("type"))
			{
				type = mapSerial.get("type");
				if(type.equals("0"))
				{
					flag = "3030";
				}
				param= flag;	
			}
					
			SerialnumberParam serialnumberParamInfo = new SerialnumberParam();
			serialnumberParamInfo.setFcategory(EjbEnum.SNParmEnum.callback.value());
			serialnumberParamInfo.setFsnid(serialnumid);
			serialnumberParamInfo.setFuserid(usrid);
			serialnumberParamInfo.setFremark("备注，序列号为："+serialNumber.getSerialnumber()+",0表示普通直接拨号，1表示回拨");			
			serialnumberParamInfo.setFchar1(type);
			serialnumberParamInfo.setFname("回拨模式");
			serialNumberParamDao.AddSerialnumberParam(serialnumberParamInfo);

			
			info = ByteConverter.GetSendData(serialNumber.getSerialnumber(),cmd,flag,true);			
			ejbproxy.saveToMq(serialNumber.getSerialnumber(), cmd, info, usrid, "服务器下行拨打模式指令",param);
			
		}  //服务器下行小红花数：
		else if(cmd.equals("7108")){
			String score = "0000";
			if(mapSerial.containsKey("score"))
			{				
				score = mapSerial.get("score");
				score = Hex.encodeHexStr(score.getBytes());				
				if(score.length()==2)
				{
					score = "30"+score;
				}				
			}			
			param= score;			
			info = ByteConverter.GetSendData(serialNumber.getSerialnumber(),cmd,score,true);			
			ejbproxy.saveToMq(serialNumber.getSerialnumber(), cmd, info, usrid, "服务器下行小红花数",param);
			
		}   //通讯录：
		else if(cmd.equals("7103")){
			String contacts = "";
			String fname = "";
			String encode="";
			if(mapSerial.containsKey("contacts"))
			{
				contacts = Tools.DecodeUtf8String( mapSerial.get("contacts"));
				param= contacts;
			}
			if(mapSerial.containsKey("encode"))
			{
				encode = mapSerial.get("encode");
			}
			
			
			if(mapSerial.containsKey("fname"))
			{
				fname = Tools.DecodeUtf8String(mapSerial.get("fname"));
				param=param+";"+fname;
				try {
					byte[] encodeByte = null;
					
					if(encode.equals("utf8")){
						encodeByte = fname.getBytes("utf8");
					}
					else if(encode.equals("unicode")){
						encodeByte = fname.getBytes("unicode");
					}
					else if(encode.equals("default")){
						encodeByte = fname.getBytes();
					}
					
					fname = Hex.encodeHexStr(encodeByte);	
					
					if(fname.startsWith("feff")&&encode.equals("unicode")){
						fname = fname.substring(4,fname.length());
					}					
					//fname=fname.replace("feff", "");
				} catch (UnsupportedEncodingException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}	
			
			//%E7%8E%8B%E6%9E%97  -- 王林
//			王林=0x73 0x8b 0x67 0x97			
//			String sTest = "王林";
//			//String sTest = "12";
//			String sHexTest ="";
//			byte[] bTest;
//			try {
//				bTest = (sTest).getBytes("unicode");
//				sHexTest = Hex.encodeHexStr(bTest);  //"王林" cdf5c1d6  feff738b6797
//			} catch (UnsupportedEncodingException e) {
//				// TODO Auto-generated catch block
//				e.printStackTrace();
//			}  //utf-8  unicode  //FEFF   
			
			//"王林"  unicode feff738b6797  empty cdf5c1d6  utf8 e78e8be69e97  gbk cdf5c1d6
			//12-   unicode feff00310032   empty 3132 utf8:3132 gbk 3132
						
			String dataHexStr=Hex.encodeHexStr((contacts).getBytes());	
			//把_替换为名字
			dataHexStr = dataHexStr.replace("5f", fname);

			info = ByteConverter.GetSendData(serialNumber.getSerialnumber(),cmd,dataHexStr,true);			
			ejbproxy.saveToMq(serialNumber.getSerialnumber(), cmd, info, usrid, "下发通讯录",param);
		}
		else if(cmd.equals("0007")){
			//serialNumAction?&action=7
			//&fromsnid=72069dc5-1738-4889-8cb0-49d478a5123f
			//&tosnid=0f8df867-0ee7-4190-8b36-44e94d44a34c
			String fromsnid="";
			String tosnid="";
			String scalltype="";
			if(mapSerial.containsKey("serialnumid"))
			{
				fromsnid = mapSerial.get("serialnumid");
			}
			if(mapSerial.containsKey("tosnid"))
			{
				tosnid = mapSerial.get("tosnid");
			}
			if(mapSerial.containsKey("scalltype"))
			{
				scalltype = mapSerial.get("scalltype");
			}			
			
			int calltype=1;  //1为直拨，0为回拨
			if(scalltype!=null&&scalltype.length()>0)
			{
				calltype = Integer.parseInt(scalltype);
			}
			
			userService.SendToSerialNumber(fromsnid,tosnid,calltype);
			
			return;
			
		}
		else if(cmd.equals("7109")){
			String msg="";
			if(mapSerial.containsKey("msg"))
			{
				msg=Tools.DecodeUtf8String( mapSerial.get("msg"));
				param = msg;
				
				byte[] bSend = null;
				try {
					bSend = msg.getBytes("utf8");					
				} catch (UnsupportedEncodingException e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
				}	
				
				String dataHexStr = Hex.encodeHexStr(bSend);
				info = ByteConverter.GetSendData(serialNumber.getSerialnumber(),cmd,dataHexStr,true);			
				ejbproxy.saveToMq(serialNumber.getSerialnumber(), cmd, info, usrid, "下发短信",param);
			}			
		}
		else if(cmd.equals("其他")){
			
		}
		
		ByteConverter.sendToServerAscii(infoDao,serialNumber.getSerialnumber(),info);

	}
	
	private void SentSilentToWatch(Serialnumber serialnumber,String weekAndValid,String begintime,String endtime)
	{
		byte bWeekValid = 0x00;
		byte hour = 0x00;
		byte minute = 0x00;
		
		ByteBuffer buffer = ByteBuffer.allocate(5); 				
			
		//星期几及开关
		bWeekValid = Integer.valueOf(weekAndValid).byteValue();
		//bWeekValid= Byte.parseByte(timeVal[0]);
		buffer.put(bWeekValid);
		
		//开始小时
		String[] timeValBegin = begintime.split(":");
		hour = Byte.parseByte(timeValBegin[0]);
		buffer.put(hour);
		
		//开始分钟
		minute = Byte.parseByte(timeValBegin[1]);
		buffer.put(minute);
	
		//结束小时
		String[] timeValEnd = endtime.split(":");
		hour = Byte.parseByte(timeValEnd[0]);
		buffer.put(hour);
		
		//结束分钟
		minute = Byte.parseByte(timeValEnd[1]);
		buffer.put(minute);					
							
		byte[] toSend = null;
		byte[] cmd = { 0x20,0x02 };
		try {
			toSend = ByteConverter.GetSendData(buffer.array(),serialnumber.getSerialnumber(),cmd);
		} catch (UnsupportedEncodingException e2) {
			// TODO Auto-generated catch block
			e2.printStackTrace();
		}
				
		String dataHexStr=Hex.encodeHexStr(toSend);				
		ejbproxy.saveToMq(serialnumber.getSerialnumber(), "2002", dataHexStr, "", "静默时间段","");			
		ByteConverter.sendToServerByte(infoDao, serialnumber.getSerialnumber(), toSend);
		
		//获取要发送到哪个客户端			
//		Info i=infoDao.findBySerialNumber(serialnumber.getSerialnumber());			
//		String[] args={i.getIp(),String.valueOf(i.getPort()),"info"};
//		try {
//			DiscardClient.getClient(args,toSend);
//		} catch (Exception e) {
//			// TODO Auto-generated catch block
//			e.printStackTrace();			
//		}
	}
	//ejb add
	public void Add(Serialnumber serialnumber) 
	{
		serialNumberDao.Add(serialnumber);
	}
	
	public Serialnumber Find(String serialnumid) 
	{
		return serialNumberDao.Find(serialnumid);
	}
	
	
	public Serialnumber findBySNNumber(String serialnumid) 
	{
		return serialNumberDao.findBySNNumber(serialnumid);
	}
	
	
	public void Update(Serialnumber serialnumber) 
	{
		serialNumberDao.Update(serialnumber);
	}
	
	@Override
	public List<SerialnumberParam> ListSerialnumberParam(int offset, int length,
			HashMap<String, String> map) {
		// TODO Auto-generated method stub
		return serialNumberParamDao.ListSerialnumberParam(offset, length, map);
		//return null;
	}


	@Override
	public List<Serialnumber> GetAll(int offset, int length,
			HashMap<String, String> map) {
		// TODO Auto-generated method stub
		return serialNumberDao.GetAll(offset, length, map);
		//return null;
	}	
	
	@Override
	public void AddSerialnumberFee(SerialnumberFee serialnumberFeeInfo) {
		// TODO Auto-generated method stub
		this.serialnumberFeeDao.AddSerialnumberFee(serialnumberFeeInfo);
	}
	
	@Override
	public BigDecimal GetSerialnumberFeeBalance(HashMap<String, String> map) {
		// TODO Auto-generated method stub
		return this.serialnumberFeeDao.GetSerialnumberFeeBalance(map);
	}

	@Override
	public List<SerialnumberFee> ListSerialnumberFee(int offset,
			int length, HashMap<String, String> map) {
		// TODO Auto-generated method stub
		return this.serialnumberFeeDao.ListSerialnumberFee(offset, length, map);
	}
	
	@Override
	public List<SerialnumberDetach> ListSerialnumberDetach(int offset,
			int length, HashMap<String, String> map) {
		// TODO Auto-generated method stub
		return this.serialNumberDao.ListSerialnumberDetach(offset, length, map);
	}
	// 从十六进制字符串到字节数组转换
		private static byte[] HexString2Bytes(String hexstr) {
		  	byte[] b = new byte[hexstr.length() / 2];
		  	int j = 0;
		  	for (int i = 0; i < b.length; i++) {
		  		char c0 = hexstr.charAt(j++);
		  		char c1 = hexstr.charAt(j++);
		  		b[i] = (byte) ((parse(c0) << 4) | parse(c1));
		  	}
		  	return b;
		}

		private static int parse(char c) {
		  	if (c >= 'a')
		  		return (c - 'a' + 10) & 0x0f;
		  	if (c >= 'A')
		  		return (c - 'A' + 10) & 0x0f;
		  	return (c - '0') & 0x0f;
		  }

		public static int CRC_XModem(byte[] bytes) {
		  	int crc = 0x00;
		  	int polynomial = 0x1021;
		  	for (int index = 0; index < bytes.length; index++) {
		  		byte b = bytes[index];
		  		for (int i = 0; i < 8; i++) {
		  			boolean bit = ((b >> (7 - i) & 1) == 1);
		  			boolean c15 = ((crc >> 15 & 1) == 1);
		  			crc <<= 1;
		  			if (c15 ^ bit)
		  				crc ^= polynomial;
		  		}
		  	}
		  	crc &= 0xffff;
		  	return crc;
		}




}
