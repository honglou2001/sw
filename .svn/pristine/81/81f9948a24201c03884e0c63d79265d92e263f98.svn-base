package com.zhuika.action;




import java.io.PrintWriter;
import java.util.HashMap;
import java.util.Map;
import java.util.Set;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import net.sf.json.JSONArray;
import net.sf.json.JSONObject;

import org.apache.log4j.Logger;
import org.apache.struts2.interceptor.ServletRequestAware;
import org.apache.struts2.interceptor.ServletResponseAware;
import org.springframework.stereotype.Controller;

import com.RestTest;
import com.zhuika.entity.BindPhone;
import com.zhuika.factory.DAOException;
import com.zhuika.service.FamilyNoService;
import com.zhuika.util.Tools;



@Controller
public class FamilyNumberAction extends BaseAction implements ServletRequestAware,
		ServletResponseAware {

	private final static Logger logger = Logger.getLogger(FamilyNumberAction.class.getName());  
	
	private static final long serialVersionUID = 1L;
    private HttpServletRequest request;
    private HttpServletResponse response;
    @Resource
    private FamilyNoService familyNoService;
    
    private static final String acountid = "ab9abe2cacfc9a5a2829f2222993018a";
    private static final String token = "91b6bc5e40148c2a74335d2b730b8c2c";
    private static final String appid = "a8c88624ad064474a59225609832c505";
    
	public void setServletRequest(HttpServletRequest request) {
		this.request=request;		
	}

	public void setServletResponse(HttpServletResponse response) {
		this.response=response;	
	}
	public void addFamilyNo(){
    	PrintWriter out=null;
    	JSONObject json=new JSONObject();
    	try {
    		request.setCharacterEncoding("utf-8");
			//response.setContentType("text/html;charset=utf8");
			response.setContentType("text/json"); 
			response.setCharacterEncoding("utf-8");   		
			out=response.getWriter();
			String serialNumber=request.getParameter("serialNumber");
			String masterNo=request.getParameter("masterNo");
			String sos=request.getParameter("sos");
			String listenNo=request.getParameter("listenNo");
			System.out.println(serialNumber);
			System.out.println(masterNo);
			System.out.println(sos);
			System.out.println(listenNo);
			BindPhone bindPhone=familyNoService.getBindPhone(serialNumber);
			System.out.println(bindPhone.toString());				
			bindPhone.setSos(sos);
			bindPhone.setStatus("0");
			bindPhone.setListenNo("listen_num="+listenNo);
			bindPhone.setMasterNo("sos_num1="+masterNo);
			System.out.println(bindPhone.toString());
			familyNoService.updateBindPhone(bindPhone);			
			json.put("state", "1");		
			json.put("info", "成功添加亲情号码");	
		} catch (Exception e) {
			json.put("state", "-1");
			json.put("info", e.getMessage());
		} finally{
			out.print(json);
			out.close();
		}
    }
	
//	private class sosno
//	{
//		private String number;
//
//		public String getNumber() {
//			return number;
//		}
//
//		public void setNumber(String number) {
//			this.number = number;
//		}
//	}
	
	public void searchFamilyNo() throws DAOException{
    	PrintWriter out=null;
    	JSONObject json=new JSONObject();
    	try {
    		request.setCharacterEncoding("utf-8");
			response.setContentType("text/json"); 
			response.setCharacterEncoding("utf-8");
			out=response.getWriter();
			String serialNumber=request.getParameter("serialNumber");
			System.out.println(serialNumber);
			BindPhone bindPhone=familyNoService.getBindPhone(serialNumber)	;			
			if(bindPhone!=null){
				json.put("state", 1);
				json.put("info", "成功查询");
				json.put("masterNo", bindPhone.getMasterNo().substring(bindPhone.getMasterNo().indexOf("=")+1));
				
				JSONArray ja = new JSONArray();

				//json.put("data", ja);
				
//				HashMap<String, String> hashSos = new HashMap<String, String>();
				String sosstr = bindPhone.getSos();
				if(sosstr!=null && sosstr.length()>0)
				{
					String[] strArr= sosstr.split(",");
					if(strArr!=null&&strArr.length>0)
					{
						for(int i=0;i<strArr.length;i++)
						{
							if(strArr[i]!=null && strArr[i].indexOf("=")>0)
							{
								String[] strVal= strArr[i].split("=");								
								// 经度,纬度
								JSONObject json1 = new JSONObject();																
								if(strVal!=null &&strVal.length==2)
								{
									json1.put(strVal[0], strVal[1]);// 
								}
								else if(strVal!=null &&strVal.length==1)
								{
									json1.put(strVal[0], "");//
								}								
								ja.add(json1);									
							}
						}
					}
				}
				
				json.put("sos",ja);
				json.put("listenNo", bindPhone.getListenNo().substring(bindPhone.getListenNo().indexOf("=")+1));		    
			}		
		} catch (Exception e) {			
			json.put("state", -1);
			json.put("info", e.getMessage());
		} finally{
			out.print(json);
			out.close();
		}
    }
	
	public void callBackAPI(){
    	PrintWriter out=null;
    	JSONObject json=new JSONObject();
    	try {
    		request.setCharacterEncoding("utf-8");
			response.setContentType("text/json"); 
			response.setCharacterEncoding("utf-8");   		
			out=response.getWriter();
			String fromNum=request.getParameter("fromNum");
			String toNum=request.getParameter("toNum");
			String type=request.getParameter("type");
			
			String fromNumClient  = "";
			//需提前映射
			HashMap<String, String> map = new HashMap<String, String>();
			map.put("18058149508", "68520027654483");
			map.put("13713975317", "68520027660803");
			
			if(type==null || (!type.equals("") && type.equals("1"))){
				if(map.containsKey(fromNum)){					
					fromNumClient = map.get(fromNum);

				}else{
					json.put("state", "2");		
					json.put("info", "呼叫失败，没有此主叫号码对应的平台号码，主叫号码请使用平台的clientNumber");	
					json.put("data", null);					
					out.print(json);
					out.close();					
					return;
				}
					
			}else if(type!=null && !type.equals("") && type.equals("2")){
				fromNumClient = fromNum;				
			}
			
			if(fromNumClient!=null && !fromNumClient.equals("")&&toNum!=null && !toNum.equals(""))
				{
					//68520027654483 - 18058149508
					//68520027660803 - 13713975317
					//075561355202
						String result = RestTest.testCallback(true, acountid, token, appid, fromNumClient, toNum);					
						
						if(result.indexOf("00000")>0)
						{
							json.put("state", "1");		
							json.put("info", String.format("成功呼叫号码,clientNumber:%s,ToNumber:%s",fromNumClient,toNum ));	
							json.put("data", result);
						}
						else
						{
							json.put("state", "4");		
							json.put("info", "呼叫失败，接口返回不成功");	
							json.put("data", result);
						}
				}

		
		} catch (Exception e) {
			json.put("state", "-1");
			json.put("info", e.getMessage());
			json.put("data", null);
		} finally{
			out.print(json);
			out.close();
		}
    }
	
	public void createClientNum(){
    	PrintWriter out=null;
    	JSONObject json=new JSONObject();
    	try {
    		request.setCharacterEncoding("utf-8");
			response.setContentType("text/json"); 
			response.setCharacterEncoding("utf-8");   		
			out=response.getWriter();
			String phonenum=request.getParameter("phonenum");			
			//clientType  String  必选  0 开发者计费；1 云平台计费。默认为0。 
			String clientType=request.getParameter("clientType");
			//charge  String  必选  充值金额（开发者计费即ClientType为0时，为可选参数），默认为0。 
			String charge=request.getParameter("charge");
			
			if(clientType==null || clientType.equals(""))
			{
				clientType = "1";
			}
			if(charge==null || charge.equals(""))
			{
				charge = "1";
			}		
			
			if(phonenum!=null && !phonenum.equals(""))
			{																
				String[] args11={"2","json",acountid,token,appid,phonenum,clientType,charge,phonenum,"","",""};
				
				String result =RestTest.testCreateClient(true, args11[2], args11[3], args11[4], args11[5], args11[6], args11[7], args11[8]);
				
				if(result.indexOf("00000")>0)
				{
					json.put("state", "1");		
					json.put("info", "成功呼叫创建号码");	
					json.put("data", result);
				}
				else
				{
					json.put("state", "2");		
					json.put("info", "创建失败，接口返回不成功");	
					json.put("data", result);
				}
			}
			else
			{
				json.put("state", "3");		
				json.put("info", "创建失败，参数不能为空");	
				json.put("data", null);
			}		
		
		} catch (Exception e) {
			json.put("state", "-1");
			json.put("info", e.getMessage());
			json.put("data", null);
		} finally{
			out.print(json);
			out.close();
		}
    }
	
	public void queryClientNum(){
    	PrintWriter out=null;
    	JSONObject json=new JSONObject();
    	try {
    		request.setCharacterEncoding("utf-8");
			response.setContentType("text/json"); 
			response.setCharacterEncoding("utf-8");   		
			out=response.getWriter();
			//如 18058149508
			String phonenum=request.getParameter("phonenum");

						
			if(phonenum!=null && !phonenum.equals(""))
			{																
				//acountid,token,appid,					
				String result =RestTest.testfindClientByMobile(true, acountid,token, phonenum, appid);
				
				if(result.indexOf("00000")>0)
				{
					json.put("state", "1");		
					json.put("info", String.format("成功查询，phonenum:%s",phonenum));	
					json.put("data", result);
				}
				else
				{
					json.put("state", "2");		
					json.put("info", "创建失败，接口返回不成功");	
					json.put("data", result);
				}
			}
			else
			{
				json.put("state", "3");		
				json.put("info", "创建失败，参数不能为空");	
				json.put("data", null);
			}		
		
		} catch (Exception e) {
			json.put("state", "-1");
			json.put("info", e.getMessage());
			json.put("data", null);
		} finally{
			out.print(json);
			out.close();
		}
    }
	
	public void chargeClientNum(){
    	PrintWriter out=null;
    	JSONObject json=new JSONObject();
    	try {
    		request.setCharacterEncoding("utf-8");
			response.setContentType("text/json"); 
			response.setCharacterEncoding("utf-8");   		
			out=response.getWriter();
			//如 68520027654483
			String clientNumber=request.getParameter("clientNumber");
			//chargeType  String  必选  0 充值；1 回收。
			String chargeType=request.getParameter("chargeType");
			//charge  String  必选  充值或回收的金额。 
			String charge=request.getParameter("charge");
						
			if(clientNumber!=null && !clientNumber.equals(""))
			{																

				String result = RestTest.testChargeClient(true, acountid,token, clientNumber, chargeType, charge, appid);
				
				if(result.indexOf("00000")>0)
				{
					json.put("state", "1");		
					json.put("info", String.format("成功充值，clientNumber:%s,chargeType:%s,charge:%s",clientNumber,chargeType,charge));	
					json.put("data", result);
				}
				else
				{
					json.put("state", "2");		
					json.put("info", "创建失败，接口返回不成功");	
					json.put("data", result);
				}
			}
			else
			{
				json.put("state", "3");		
				json.put("info", "创建失败，参数不能为空");	
				json.put("data", null);
			}		
		
		} catch (Exception e) {
			json.put("state", "-1");
			json.put("info", e.getMessage());
			json.put("data", null);
		} finally{
			out.print(json);
			out.close();
		}
    }
	
	
	public void queryClientList(){
    	PrintWriter out=null;
    	JSONObject json=new JSONObject();
    	try {
    		request.setCharacterEncoding("utf-8");
			response.setContentType("text/json"); 
			response.setCharacterEncoding("utf-8");   		
			out=response.getWriter();
			//如 68520027654483
			String start=request.getParameter("start");
			//chargeType  String  必选  0 充值；1 回收。
			String limit=request.getParameter("limit");
			//charge  String  必选  充值或回收的金额。 
			String charge=request.getParameter("charge");
						
			if(start!=null && !start.equals(""))
			{																

				String result = RestTest.testfindClients(true, acountid,token,appid, start, limit);
				
				if(result.indexOf("00000")>0)
				{
					json.put("state", "1");		
					json.put("info", String.format("成功分页查询，start:%s,limit:%s",start,limit));	
					json.put("data", result);
				}
				else
				{
					json.put("state", "2");		
					json.put("info", "创建失败，接口返回不成功");	
					json.put("data", result);
				}
			}
			else
			{
				json.put("state", "3");		
				json.put("info", "创建失败，参数不能为空");	
				json.put("data", null);
			}		
		
		} catch (Exception e) {
			json.put("state", "-1");
			json.put("info", e.getMessage());
			json.put("data", null);
		} finally{
			out.print(json);
			out.close();
		}
    }
	public void callResultNotify(){
    	PrintWriter out=null;
    	JSONObject json=new JSONObject();
    	try {
    		request.setCharacterEncoding("utf-8");
//			response.setContentType("text/json"); 			   					
			response.setContentType("text/xml;charset=utf-8");
			response.setCharacterEncoding("utf-8");
			
			out=response.getWriter();
			
		
			    logger.info("--------------call back StringBuffer----------------");
			    StringBuffer sBuffer = Tools.getInputStream(request);
			    logger.info(sBuffer.toString());
		        logger.info("--------------call back StringBuffer----------------");
		        
		        
//		        URL url = new URL(urlBuf);
//		        HttpURLConnection httpURLConnection = (HttpURLConnection) url
//		          .openConnection();
//		        httpURLConnection.setDoOutput(true);
//		        httpURLConnection.setDoInput(true);
//		        httpURLConnection.setRequestMethod("POST");   httpURLConnection.setConnectTimeout(5000);
//		        httpURLConnection.setReadTimeout(5000);
//		        httpURLConnection.connect();
//		        BufferedWriter out = new BufferedWriter(new OutputStreamWriter(
//		          httpURLConnection.getOutputStream(), "GBK"));
		        

		        out.println("<?xml version=\"1.0\" encoding=\"UTF-8\"?>");
		        out.println("<response>");
		        out.println("<retcode>0</retcode>");
		        out.println("<reason>100013</reason>");
		        out.println("</response>");
		        out.flush();
		        
//		        json.put("state", "1");
//				json.put("info","ok");
		
		} catch (Exception e) {
			json.put("state", "-1");
			json.put("info", e.getMessage());
			json.put("data", null);
		} finally{
//			out.print(json);
			out.close();
		}
    }
}
