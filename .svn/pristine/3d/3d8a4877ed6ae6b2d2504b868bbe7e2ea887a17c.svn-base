package com.zhuika.action;

import java.io.BufferedInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.PrintWriter;
import java.sql.Timestamp;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.UUID;

import javax.annotation.Resource;
import javax.servlet.ServletContext;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import net.sf.json.JSONArray;
import net.sf.json.JSONObject;
import net.sf.json.JsonConfig;
import net.sf.json.processors.JsonValueProcessor;

import org.apache.struts2.dispatcher.multipart.MultiPartRequestWrapper;
import org.apache.struts2.interceptor.ServletRequestAware;
import org.apache.struts2.interceptor.ServletResponseAware;
import org.springframework.stereotype.Controller;

import com.common.ejb.EJBTime;
import com.watch.ejb.FriendRelation;
import com.watch.ejb.Serialnumber;
import com.watch.ejb.UserWatch;
import com.zhuika.entity.BindPhone;
import com.zhuika.entity.User;
import com.zhuika.service.FamilyNoService;
import com.zhuika.service.SerialNumberService;
import com.zhuika.service.UserService;
import com.zhuika.util.FileWebService;
import com.zhuika.util.Jsonconf;
import com.zhuika.util.Tools;

@Controller
public class UserAction extends BaseAction implements ServletResponseAware,
		ServletRequestAware {

	private static final long serialVersionUID = 1L;
	private HttpServletRequest request;
	private HttpServletResponse response;
	@Resource
	private UserService userService;
	@Resource
	private FamilyNoService famliyservice;
	@Resource
	private SerialNumberService serialNumService;
	private String[] allowedExt = new String[] { "jpg", "jpeg", "gif","png"};
	
	public void setServletRequest(HttpServletRequest request) {
		this.request = request;
	}

	public void setServletResponse(HttpServletResponse response) {
		this.response = response;
	}

	private String SaveImg(HttpServletRequest httpServletRequest, refData refdata) throws Exception {

		try {
			MultiPartRequestWrapper wrapper = (MultiPartRequestWrapper) httpServletRequest;
			File file = wrapper.getFiles("usrimg")[0];
			String fileName = wrapper.getFileNames("usrimg")[0];

			String ext = getFileExtension(fileName).toLowerCase();
			
			int allowFlag = 0;
			int allowedExtCount = allowedExt.length;
			for (; allowFlag < allowedExtCount; allowFlag++) {
				if (allowedExt[allowFlag].toLowerCase().equals(ext)){					
					break;
				}
			}
			if (allowFlag == allowedExtCount) {
				//上传文件后缀不正确
				refdata.setStatus(2);
				return null;
			}			
			// 检查文件大小
			long maxSize = 1024 * 1024 * 1;
			if (file.length() > maxSize) {
				// "上传文件大小超过限制。"
				refdata.setStatus(3);
				return null;
			}
			fileName = refdata.getPicurlid() + "." + ext;
			// 检查扩展名
			String upload = Thread.currentThread().getContextClassLoader()
					.getResource("").getPath();
			upload = upload.replace("/WEB-INF/classes/", "/"+refdata.getImgurl()+"/");
			String path = "/"+refdata.getImgurl()+"/" + fileName;
			String savePath = upload + "/" + fileName;
			InputStream in;
			try {
				in = new FileInputStream(file);
				inputStream2File(in, savePath);				
			} catch (Exception e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}

			return path;
		} catch (Exception ex) {
			throw ex;
		}

	}

	/**
	 * 获取文件扩展名
	 * 
	 * @param file
	 * @return
	 */
	private static String getFileExtension(String fileName) {
		if (fileName.lastIndexOf(".") != -1 && fileName.lastIndexOf(".") != 0) {
			return fileName.substring(fileName.lastIndexOf(".") + 1);
		} else {
			return "";
		}
	}

	private static void inputStream2File(InputStream is, String savePath)
			throws Exception {
		System.out.println("文件保存路径为:" + savePath);
		InputStream inputSteam = null;
		BufferedInputStream fis = null;
		FileOutputStream fos = null;
		File file = new File(savePath);
		try {
			inputSteam = is;
			fis = new BufferedInputStream(inputSteam);
			fos = new FileOutputStream(file);
			int f;
			while ((f = fis.read()) != -1) {
				fos.write(f);
			}
		} finally {
			if (fos != null) {
				fos.flush();
				fos.close();
			}

			if (fis != null) {
				fis.close();
			}
			if (inputSteam != null) {
				inputSteam.close();
			}
		}

	}

	private class refData
	{
		private int status = 1;
		private String imgurl = "upusrimg";
		private String picurlid = "";

		public String getPicurlid() {
			return picurlid;
		}

		public void setPicurlid(String picurlid) {
			this.picurlid = picurlid;
		}

		public String getImgurl() {
			return imgurl;
		}

		public void setImgurl(String imgurl) {
			this.imgurl = imgurl;
		}

		public int getStatus() {
			return status;
		}

		public void setStatus(int status) {
			this.status = status;
		}
		
	}
	
	public void doUpload() {
		PrintWriter out = null;
		JSONObject json = new JSONObject();
		try {
			request.setCharacterEncoding("utf-8");
			response.setContentType("text/json");
			response.setCharacterEncoding("utf-8");
			out = response.getWriter();
			String usrid = request.getParameter("usrid");
			String serialnumid = request.getParameter("serialnumid");
			
			UserWatch user =null;
			Serialnumber serialnum = null;
			refData refdata = new refData();
			
			if(usrid!=null && usrid.length()>0){
				user = userService.Find(usrid);
				refdata.setPicurlid(usrid);
				
			}else if(serialnumid!=null && serialnumid.length()>0){
				serialnum = serialNumService.Find(serialnumid);
				refdata.setPicurlid(serialnumid);
			}

			
			if (usrid!=null && usrid.length()>0 && user == null) {
				json.put("state", 2);
				json.put("info", "此用户不存在");
				json.put("usrid","");
				json.put("imgurl", "");
				
				out.print(json);
				out.close();
				
				return ;
			} else if (serialnumid!=null && serialnumid.length()>0 && serialnum == null) {
				json.put("state", 2);
				json.put("info", "此序列号不存在");
				json.put("usrid","");
				json.put("imgurl", "");
				
				out.print(json);
				out.close();
				
				return ;
			}else if (serialnumid!=null && serialnumid.length()>0 && serialnum != null){
				refdata.setImgurl("upsnimg");
			}

			
			
			refdata.setStatus(1);
			
			String imgPath = SaveImg(this.request, refdata);
			
			String info = "";
			if(refdata.getStatus() == 2){
				info = "上传文件后缀不正确，只允许:";
				int allowedExtCount = allowedExt.length;
				for (int allowFlag = 0; allowFlag < allowedExtCount; allowFlag++)
					info +="*." + allowedExt[allowFlag].toLowerCase()+" ";					
			}
			else if(refdata.getStatus() == 3){
				info = "文件大小不允许大于1M";
			}
			else if(refdata.getStatus() == 1){
				
//				user.setPicture(imgPath);
//				userService.Update(user);	
				savePicture(user,serialnum,imgPath);
				
				imgPath = Tools.getHost(request) + imgPath;	
										
				info = "图片成功上传";				
			}

			json.put("state", 1);
			json.put("info", info);
			json.put("usrid", refdata.getPicurlid());
			json.put("imgurl", imgPath);

		} catch (Exception e) {
			json.put("state", -1);
			json.put("info", e.getMessage());
			json.put("usrid", "");
			json.put("imgurl", "");
		} finally {
			out.print(json);
			out.close();
		}
	}
	
	private void savePicture(UserWatch user,Serialnumber serialnum,String imgPath)
	{
		if(user==null && serialnum!=null)
		{
			serialnum.setFpicture(imgPath);
			serialNumService.Update(serialnum);			

		}else if(user!=null && serialnum==null)
		{
			user.setPicture(imgPath);
			userService.Update(user);
		}			
	}

	/**
	 * 登陆,根据手机号和密码
	 */
	public void userLogin() {
		PrintWriter out = null;
		JSONObject json = new JSONObject();
		try {
			request.setCharacterEncoding("utf-8");
			response.setContentType("text/json");
			response.setCharacterEncoding("utf-8");
			out = response.getWriter();
			String phone = request.getParameter("phone");
			String password = request.getParameter("password");
			
			HashMap<String, String> map = new HashMap<String, String>();
			map.put("fmobile", phone);

			List<UserWatch> listUsers = userService.GetAll(0, 1, map);
			if(listUsers!=null && listUsers.size()>0)
			{
				UserWatch userWatch = listUsers.get(0);
				if(password.equals(userWatch.getPassword()))
				{
					HashMap<String, String> mapSerial = new HashMap<String, String>();
					mapSerial.put("user.funiqueid", userWatch.getFuniqueid());					
					List<Serialnumber> listSerialNumber = this.serialNumService.GetAll(0, 100, mapSerial);
					
					json.put("state", 1);
					json.put("info", "成功登录，获取用户及序列号信息");
					
					JsonConfig  jconfig = Jsonconf.getUserJsonConf(request);				
					jconfig.setExcludes(new String[] { "phone", "id" ,"furl"});
					json.put("data", JSONObject.fromObject(userWatch, jconfig));
					
				    jconfig = Jsonconf.getSerialnumJsonConf(request);
					jconfig.setExcludes(new String[] { "id" });
					json.put("SerialNumber", JSONArray.fromObject(listSerialNumber, jconfig));

				}
				else
				{
					json.put("state", 2);
					json.put("info", "登录密码错误，登陆失败");
					json.put("data", null);
					json.put("SerialNumber", null);
				}
				
			}else
			{
				json.put("state", 3);
				json.put("info", "不存在此手机号，登陆失败");
				json.put("data", null);
				json.put("SerialNumber", null);
			}
			
			
//			User user = userService.login(phone);
//			if (user != null && password.equals(user.getPassword())) {
//				json.put("state", 1);
//				json.put("info", user.getSerialNumber());
//
//				JsonConfig  jconfig = Jsonconf.getUserJsonConf(request);				
//				jconfig.setExcludes(new String[] { "phone", "id" });
//				
//				json.put("data", JSONObject.fromObject(user, jconfig));
//				System.out.println("登陆成功");
//			} else {
//				json.put("state", 2);
//				json.put("info", "登陆失败");
//				json.put("data", null);
//				System.out.println("登陆失败");
//			}
		} catch (Exception e) {
			json.put("state", -1);
			json.put("info", e.getMessage());
			json.put("data", null);
			json.put("SerialNumber", null);
		} finally {
			out.print(json);
			out.close();
		}
	}

	public void getUser() {
		PrintWriter out = null;
		JSONObject json = new JSONObject();
		try {
			request.setCharacterEncoding("utf-8");
			response.setContentType("text/json");
			response.setCharacterEncoding("utf-8");
			out = response.getWriter();
			String phone = request.getParameter("phone");
			String fid = request.getParameter("usrid");

			HashMap<String, String> map = new HashMap<String, String>();
			map.put("fmobile", phone);
			map.put("funiqueid", fid);

			List<UserWatch> listUsers = userService.GetAll(0, 1, map);
			UserWatch user = null;
			if (listUsers != null && listUsers.size() > 0) {
				user = listUsers.get(0);
			}
			if (user != null) {
				
				JsonConfig  jconfig = Jsonconf.getUserJsonConf(request);
				
				jconfig.setExcludes(new String[] { "phone", "id" });

				json.put("state", 1);
				json.put("info", "查询成功");
				json.put("data", JSONObject.fromObject(user, jconfig));

			} else {
				json.put("state", 2);
				json.put("info", "查询失败,无此手机用户");
				json.put("data", null);

			}
		} catch (Exception e) {
			json.put("state", -1);
			json.put("info", e.getMessage());
		} finally {
			out.print(json);
			out.close();
		}
	}

	/**
	 * 注册
	 */
	public void userRegister() {

		PrintWriter out = null;
		JSONObject json = new JSONObject();
		try {
			request.setCharacterEncoding("utf-8");
			response.setContentType("text/json");
			response.setCharacterEncoding("utf-8");
			out = response.getWriter();

			String serialNumber = request.getParameter("serialNumber");
			String userName = request.getParameter("userName");

			userName = Tools.DecodeUtf8String(userName);

			String phone = request.getParameter("phone");
			String password = request.getParameter("password");
			String sex = request.getParameter("sex");
			String nickname = Tools.DecodeUtf8String(request
					.getParameter("nickname"));
			String birthday = request.getParameter("birthday");
			String height = request.getParameter("height");
			String weight = request.getParameter("weight");
			// String picture=request.getParameter("picture");
			String femail = request.getParameter("femail");
			String fremark = Tools.DecodeUtf8String(request
					.getParameter("fremark"));

			Calendar cal = Calendar.getInstance();
			Date date = cal.getTime();
			SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
			String createTime = sdf.format(date);

			UserWatch user = new UserWatch();
			user.setSerialnumber(serialNumber);
			user.setUsername(userName);
			user.setPhone(phone);
			user.setFmobile(phone);
			user.setPassword(password);
			user.setSex(sex);
			user.setCreatetime(createTime);
			user.setNickname(nickname);
			user.setBirthday(birthday);
			user.setHeight(height);
			user.setWeight(weight);
			user.setFemail(femail);
			user.setFremark(fremark);

			String uniqueid = UUID.randomUUID().toString();
			user.setFuniqueid(uniqueid);

			String msg = userService.reg(user);
			String state = "1";
			if ("success".equals(msg)) {
				msg = "成功注册";
				state = "1";
			} else {
				state = "2";
				uniqueid = "";
			}
			json.put("state", state);
			json.put("info", msg);
			json.put("usrid", uniqueid);
		} catch (Exception e) {
			json.put("state", -1);
			json.put("info", e.getMessage());
			json.put("usrid", "");
		} finally {
			out.print(json);
			out.close();
		}
	}

	/**
	 * 注册
	 */
	public void userUpdate() {

		PrintWriter out = null;
		JSONObject json = new JSONObject();
		try {
			request.setCharacterEncoding("utf-8");
			response.setContentType("text/json");
			response.setCharacterEncoding("utf-8");
			out = response.getWriter();
			String fid = request.getParameter("usrid");
			String userName = request.getParameter("userName");
			userName = Tools.DecodeUtf8String(userName);

			String sex = request.getParameter("sex");
			String nickname = Tools.DecodeUtf8String(request
					.getParameter("nickname"));
			String birthday = request.getParameter("birthday");
			String height = request.getParameter("height");
			String weight = request.getParameter("weight");

			String femail = request.getParameter("femail");
			String fremark = Tools.DecodeUtf8String(request
					.getParameter("fremark"));

			Calendar cal = Calendar.getInstance();
			Date date = cal.getTime();
			SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
			String createTime = sdf.format(date);

			UserWatch user = userService.Find(fid);

			if (user != null) {
				user.setSex(sex);
				user.setCreatetime(createTime);
				user.setNickname(nickname);
				user.setBirthday(birthday);
				user.setHeight(height);
				user.setWeight(weight);
				user.setFemail(femail);
				user.setFremark(fremark);

				userService.Update(user);

				json.put("state", 1);
				json.put("info", "成功修改");
			} else {
				json.put("state", 2);
				json.put("info", "用户不存在");
			}

		} catch (Exception e) {
			json.put("state", -1);
			json.put("info", e.getMessage());

		} finally {
			out.print(json);
			out.close();
		}
	}

	/**
	 * 密码找回
	 */
	public void retrievePassword() {

		PrintWriter out = null;
		JSONObject json = new JSONObject();
		try {
			request.setCharacterEncoding("utf-8");
			response.setContentType("text/json");
			response.setCharacterEncoding("utf-8");
			out = response.getWriter();

			String phone = request.getParameter("phone");
			String familyphone = request.getParameter("familyno");
			HashMap<String, String> map = new HashMap<String, String>();
			map.put("fmobile", phone);

			List<UserWatch> listUsers = userService.GetAll(0, 1, map);
			UserWatch user = null;
			if (listUsers != null && listUsers.size() > 0) {
				user = listUsers.get(0);
			}
			if (user != null) {

				String serialNumber = user.getSerialnumber();
				BindPhone bindPhone = famliyservice.getBindPhone(serialNumber);
				if (bindPhone != null) {
					String masterno = bindPhone.getMasterNo();
					String sosno = bindPhone.getSos();
					String listenno = bindPhone.getListenNo();

					if (masterno.indexOf(familyphone) > 0
							|| sosno.indexOf(familyphone) > 0
							|| listenno.indexOf(familyphone) > 0) {
						json.put("state", 1);
						json.put("info", "输入的亲情号码正确，可以重置密码");
						json.put("usrid", user.getFuniqueid());

					} else {
						json.put("state", 2);
						json.put("info", "找不到输入的亲情号码信息，不允许重置密码");
						json.put("usrid", "");
					}
				} else {
					json.put("state", 2);
					json.put("info", "找不到注册时的手环序列号对应的亲情号码信息，不允许重置密码");
					json.put("usrid", "");
				}
			} else {
				json.put("state", 2);
				json.put("info", "此手机用户不存在，不允许重置密码");
				json.put("usrid", "");
			}

		} catch (Exception e) {
			json.put("state", -1);
			json.put("info", e.getMessage());
			json.put("usrid", "");
		} finally {
			out.print(json);
			out.close();
		}
	}

	/**
	 * 修改密码
	 */
	public void updatePassword() {
		PrintWriter out = null;
		JSONObject json = new JSONObject();
		try {
			request.setCharacterEncoding("utf-8");
			response.setContentType("text/json");
			response.setCharacterEncoding("utf-8");
			out = response.getWriter();
			String fid = request.getParameter("usrid");
			String oldPwd = request.getParameter("oldPwd");
			String newPwd = request.getParameter("newPwd");

			String retrievePwd = request.getParameter("retrievePwd");
			boolean bretrievePwd = false;
			if (retrievePwd != null && retrievePwd.length() > 0
					&& retrievePwd.equals("2015key")) {
				bretrievePwd = true;
			}

			UserWatch user = userService.Find(fid);

			if (user != null
					&& (user.getPassword().equals(oldPwd) || bretrievePwd)) {
				user.setPassword(newPwd);
				userService.Update(user);
				json.put("state", 1);
				json.put("info", "成功修改密码");

			} else {
				json.put("state", 1);
				json.put("info", "修改密码失败，旧密码不对或重置信息不正确");

			}

		} catch (Exception e) {
			json.put("state", -1);
			json.put("info", e.getMessage());
		} finally {
			out.print(json);
			out.close();
		}
	}
	
	/**
	 * 查找用户以加为好友
	 */
	public void searchUser() {
		PrintWriter out = null;
		JSONObject json = new JSONObject();
		try {
			request.setCharacterEncoding("utf-8");
			response.setContentType("text/json");
			response.setCharacterEncoding("utf-8");
			out = response.getWriter();
			String phone = request.getParameter("phone");
			String userName = request.getParameter("userName");

			HashMap<String, String> map = new HashMap<String, String>();
			map.put("fmobile", phone);
			map.put("userName", userName);
			map.put("forfriend", "1");

			List<UserWatch> listUsers = userService.GetAll(0, 1, map);

			if (listUsers != null&& (listUsers.size()>0)) {

				json.put("state", 1);
				json.put("info", "成功查询用户信息，可以添加好友");
				
				JsonConfig  jconfig = Jsonconf.getUserJsonConf(request);				
				jconfig.setExcludes(new String[] { "phone", "id","password" });
				json.put("data", JSONObject.fromObject(listUsers.get(0), jconfig));
			

			} else {
				json.put("state", 2);
				json.put("info", "查询不到此用户名及手机号码的用户");

			}

		} catch (Exception e) {
			json.put("state", -1);
			json.put("info", e.getMessage());
		} finally {
			out.print(json);
			out.close();
		}
	}
	
	//提交加好友邀请
	public void postFriendReq() {
		PrintWriter out = null;
		JSONObject json = new JSONObject();
		try {
			request.setCharacterEncoding("utf-8");
			response.setContentType("text/json");
			response.setCharacterEncoding("utf-8");
			out = response.getWriter();
			String friendusrid = request.getParameter("tosnid");
			String usid = request.getParameter("fromsnid");
			String attachText =Tools.DecodeUtf8String(request.getParameter("attachText"));


			FriendRelation friendRelationInfo = new FriendRelation();
			friendRelationInfo.setFuseridstr(usid);
			friendRelationInfo.setFfriendid(friendusrid);
			friendRelationInfo.setFattachtext(attachText);

			userService.Add(friendRelationInfo);

			json.put("state", 1);
			json.put("info", "成功提交加好友请求，请留意朋友状态列表馈");

		} catch (Exception e) {
			json.put("state", -1);
			json.put("info", e.getMessage());
		} finally {
			out.print(json);
			out.close();
		}
	}
	
	//查询好友列表，包括没通过验证
	public void queryFriendList() {
		PrintWriter out = null;
		JSONObject json = new JSONObject();
		try {
			request.setCharacterEncoding("utf-8");
			response.setContentType("text/json");
			response.setCharacterEncoding("utf-8");
			out = response.getWriter();

			String qtype = request.getParameter("qtype");
			String snid = request.getParameter("snid");
			String appusrid = request.getParameter("appusrid");
			
			HashMap<String, String> map = new HashMap<String, String>();
			map.put("snid", snid);
			map.put("qtype", qtype);  //1查询我请求要加的好友；2、查询谁请求加我为好友
			map.put("appusrid", appusrid); 

			String info ="成功查询我请求要加的好友";
			
			if(qtype.equals("2"))
			{
				 info ="成功查询谁请求加我为好友";
			}
			else if(qtype.equals("3"))
			{
				 info ="成功查询好友信息";
			}
			else if(qtype.equals("4"))
			{
				 info ="成功查询APP用户下的手表好友信息";
			}
			
			List<FriendRelation> listrelation = userService.ListFriendRelation(0, 1000, map);

			json.put("state", 1);
			json.put("info", info);
			
			
			JsonConfig  jconfig = Jsonconf.getUserJsonConf(request);
			jconfig.setExcludes(new String[] {"fupdatetime","fcategory", "ffieldstatus", "fincreaseid", "fisdelete" ,"forder"});
			
			json.put("data", JSONArray.fromObject(listrelation, jconfig));

		} catch (Exception e) {
			json.put("state", -1);
			json.put("info", e.getMessage());
			json.put("data", null);
		} finally {
			out.print(json);
			out.close();
		}
	}
	
	//通过加好友邀请
	public void passFriendReq() {
		PrintWriter out = null;
		JSONObject json = new JSONObject();
		try {
			request.setCharacterEncoding("utf-8");
			response.setContentType("text/json");
			response.setCharacterEncoding("utf-8");
			out = response.getWriter();
			String frelationid = request.getParameter("frelationid");			
			String action =request.getParameter("action");
			String info = "";
	
				
			//1为通过；2为拒绝；
			String passaction = request.getParameter("passaction");

			FriendRelation friendRelationInfo = userService.find(frelationid);			
			if(friendRelationInfo!=null)
			{
				if(action!=null&&action.equals("rerequest"))
				{	
					String attachText =Tools.DecodeUtf8String(request.getParameter("attachText"));
					
					if(friendRelationInfo.getFstatus() == 1){						
						info = "请求已经通过审核，不能重新发送请求";
						
					}else{
						friendRelationInfo.setFstatus(0);				
				    	Timestamp datetime = EJBTime.getTimeStamp();
				    	friendRelationInfo.setFstatustime(datetime);
				    	friendRelationInfo.setFattachtext(attachText);
				    	friendRelationInfo.setFremark(";Re" + friendRelationInfo.getFremark());
				    	userService.Update(friendRelationInfo);
				    	info = "成功重新发送加好友请求";				    	
					}		    	
			    	
			    	
				}else if(passaction!=null && !passaction.equals(""))
				{
					if (friendRelationInfo.getFstatus()==1 || friendRelationInfo.getFstatus()==2)
					{
						info = "不能重复操作，此申请已经做了审核操作，已存在的action为"+friendRelationInfo.getFstatus();
						
					}else{
						friendRelationInfo.setFstatus(Integer.parseInt(passaction));				
				    	Timestamp datetime = EJBTime.getTimeStamp();
				    	friendRelationInfo.setFstatustime(datetime);
				    	
						userService.Update(friendRelationInfo);
						
						//如果action为通过，则把号码发送给对方
						if(friendRelationInfo.getFstatus() == 1){
							userService.SendFriendToWatch(friendRelationInfo);
							
							info = "操作成功，已通过好友请求并发送请求手机号码到好友手表";
						}else if(friendRelationInfo.getFstatus() == 2){
							info = "操作成功，已拒绝此好友申请";
						}
					}
											
				}
			}


			json.put("state", 1);
			json.put("info", info);

		} catch (Exception e) {
			json.put("state", -1);
			json.put("info", e.getMessage());
		} finally {
			out.print(json);
			out.close();
		}
	}
}
